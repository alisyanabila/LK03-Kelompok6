def matrix_product(p):
 
    length = len(p) # len(p) = number of matrices + 1
 
    m = [[-1]*length for _ in range(length)]
    s = [[-1]*length for _ in range(length)]
 
    for i in range(1, length):
        m[i][i] = 0
 
    for chain_length in range(2, length):
        for start in range(1, length - chain_length + 1):
            end = start + chain_length - 1
            q = float('inf')
            for k in range(start, end):
                temp = m[start][k] + m[k + 1][end] + p[start - 1]*p[k]*p[end]
                if temp < q:
                    q = temp
                    s[start][end] = k
            m[start][end] = q
 
    return m, s
 
 
def print_parenthesization(s, start, end):

    if start == end:
        print('A[{}]'.format(start), end='')
        return
 
    k = s[start][end]
 
    print('(', end='')
    print_parenthesization(s, start, k)
    print_parenthesization(s, k + 1, end)
    print(')', end='')
 
 
n = int(input('Masukkan banyak matriks: '))
p = []
for i in range(n):
    temp = int(input('Masukkan nilai pada baris ke-{} matriks: '.format(i + 1)))
    p.append(temp)
temp = int(input('Masukkan nilai pada kolom ke-{} matriks: '.format(n)))
p.append(temp)
 
m, s = matrix_product(p)
print('Banyaknya perkalian skalar yang dibutuhkan:', m[1][n])
print('Hasil Pengkurungan Optimal: ', end='')
print_parenthesization(s, 1, n)
print("\nMatriks M: ", m)
print("Matriks S: ", s)
